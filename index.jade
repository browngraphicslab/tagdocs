doctype html
html
head
    link(rel="stylesheet", href="css/style.css")
    script(src="js/jquery.js")
    script(src="js/raphael-min.js")
    script(src="http://seadragon.com/ajax/0.8/seadragon-min.js")
    script(src="https://google-code-prettify.googlecode.com/svn/loader/run_prettify.js?lang=css&skin=sons-of-obsidian")
    script(src="http://popcornjs.org/code/dist/popcorn-complete.min.js")
    script(src="js/popcorn.capture.js")
    script(src="js/alphacss.js")
    script(src="js/poptest.js")
    script(src="js/pathsmoothing.js")
    script(src="js/tagdocs.js")
    title.
        TAG Docs
      
mixin genPageTab(title, id)
    - var r = Math.floor((Math.random()*50)) + 205;
    - var g = Math.floor((Math.random()*50)) + 205;
    - var b = Math.floor((Math.random()*50));
    - var hex = '#' + r.toString(16) + g.toString(16) + b.toString(16);
    li: a.pageanch(id="li-"+id, class="page-tab", onclick="openPage('"+id+"')") #{title}
  
mixin genList(title, info)
    - info.sort(function(a,b){return a.name.toLowerCase() < b.name.toLowerCase() ? -1 : 1;});
    h2.linklist #{title}
    ul
        for pair in info
            li.linklistitem: a.link(href=pair.href, target="_blank") #{pair.name}
    br

mixin genPageHeading(heading, id)
    div(id=id, class="page")
        h2 #{heading}

mixin genPageImg(src)
    a(href=src, target="_blank")
        img(class="pageImg", src=src, alt="Sorry, image failed to load!")

mixin genThumbnailImg(input)
    .innerTableContainer
        a(href=input.href, target="_blank")
            img(class="thumbnailImg", src=input.src, alt="Sorry!")

mixin createLinkOld(input)
    a.outsideLink(href=input.href, tags=input.tags)
        .outsideLinkContainer
            .outsideLinkTitle #{input.title}
            .outsideLinkDescription #{input.description}

mixin createLink(input)
    a.resource(href=input.href, tags=input.tags)
        .resourceTitleContainer
            .resourceTitleInnerContainer
                .resourceTitle #{input.title}
        .resourceDescriptionContainer
            .resourceDescriptionInnerContainer
                .resourceDescription!= input.description.replace(/\n/g, '<br />')


body
    div(id="back")
        div(id="contentWrapper")
        
            /////////////
            // TOP BAR //
            /////////////
            
            div#topbar
                span#top-text
                    a(href='') TAG Docs
                span#top-subtext
                    | A compendium of TAG-related materials
                    
            ///////////////
            // LEFT MENU //
            ///////////////
            
            div(id="leftbar")
                h1.linkhead Get set up
                ul
                    +genPageTab("Debugging", "debugging")
                    +genPageTab("Developer Guide", "dev")
                    +genPageTab("Git and GitHub", "github")
                    +genPageTab("Grunt Notes", "grunt")
                    +genPageTab("Jade Workshop", "jade-workshop")
                    +genPageTab("JavaScript Workshop", "javascript-workshop")
                    +genPageTab("JS Hint: Good Practices", "jshint-practices")
                    +genPageTab("MAMP/WAMP", "mamp")
                    +genPageTab("Starter Projects", "starter")
                    +genPageTab("Stylus Workshop", "stylus-workshop")
                    +genPageTab("Testing", "testing")
                    +genPageTab("Web App Workflow", "webapp")
                    +genPageTab("YUIDoc", "yuidoc")
                br
                h1.linkhead Misc
                ul
                    +genPageTab("CSS Alphabetizer", "alphacss")
                    +genPageTab("Ink Path Smoothing","pathsmoothing")
                    +genPageTab("Jade/Stylus Factoring", "factoring")
                    +genPageTab("Popcorn Test", "popcorn")
                    +genPageTab("Redmine Overview", "redmine")
                    +genPageTab("Seadragon Viewers", "seadragonTest")
                    
                br
                h1.linkhead Links
                +genList("Web app links", [
                    {href: "https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Getting_started", name: "MDN CSS tutorial"},
                    {href: "http://www.w3schools.com/html/default.asp", name: "W3Schools HTML tutorial"},
                    {href: "https://developer.mozilla.org/en-US/learn/html", name: "MDN HTML resources"},
                    {href: "https://developer.mozilla.org/en-US/docs/DOM/DOM_Reference/Introduction", name: "The DOM"},
                    {href: "http://learnboost.github.io/stylus/", name: "Stylus Docs"},
                    {href: "http://jade-lang.com/api/", name: "Jade home and API guide"},
                    {href: "http://naltatis.github.io/jade-syntax-docs/#basics", name: "Jade documentation"},
                    {href: "http://cssdeck.com/labs/learning-the-jade-templating-engine-syntax", name: "Jade tutorial"},
                    {href: "http://html5test.com/compare/feature/index.html", name: "HTML5 browser support"},
                    {href: "http://necolas.github.io/normalize.css/", name: "normalize.css"},
                    {href: "https://github.com/bower/bower", name: "Bower pkg management"},
                    {href: "http://gruntjs.com/", name: "Grunt"}])
                +genList("JS Fiddle Demos", [
                    {href: "http://jsfiddle.net/bleveque/EXuu5/", name: "Scope"},
                    {href: "http://jsfiddle.net/bleveque/5TAJg/", name: "Scope and Closures"},
                    {href: "http://jsfiddle.net/bleveque/QSv2J/", name: "Pseudoclassical Inheritance"}])
                +genList("Tools", [
                    {href: "http://jsfiddle.net/", name: "JSFiddle"},
                    {href: "http://www.jslint.com/", name: "JSLint"},
                    {href: "http://www.dirtymarkup.com/", name: "Dirty Markup"},
                    {href: "http://jsperf.com/", name: "JSPerf"},
                    {href: "http://www.oldversion.com/", name: "Old browser versions"},
                    {href: "http://modern.ie/en-us", name: "Old IE versions"}])
                +genList("Stuff.js", [
                    {href: "https://developer.mozilla.org/en-US/docs/Web/API/window.requestAnimationFrame", name: "Request Anim Frame"},
                    {href: "https://developer.mozilla.org/en-US/docs/Web/API/document.createDocumentFragment", name: "Document fragments"},
                    {href: "http://api.jquery.com/jQuery.ajax/", name: "JQuery.ajax()"}])
                +genList("CSS tips", [
                    {href: "http://www.w3schools.com/cssref/tryit.asp?filename=trycss3_text-overflow_hover", name: "Text overflow"},
                    {href: "http://css-tricks.com/box-sizing/", name: "Box sizing"},
                    {href: "http://vaughnroyko.com/the-real-scoop-on-jquery-find-performance/", name: "Selectors and .find"}])
                +genList("Jade examples", [
                    // {href: "http://localhost:3000", name:"Ex. 1"},
                    {href: "./jade_examples/ardra/myweb.html", name: "Ex. 1"},
                    {href: "./jade_examples/libby/index.html", name: "Ex. 2"}])
            
            //////////////////
            // PAGE CONTENT //
            //////////////////
            
            #content

                //////////////////
                // WELCOME PAGE //
                //////////////////
 
                #welcome.page
                    h2 Welcome!
                    br
                    | Welcome to the Touch Art Gallery Docs, a list of TAG-related material and references.
                    br
                    br
                    | If you are a developer getting ready to start working on TAG, take a look at the
                    | "Get set up" pages to the left.
                    br
                    br
                    br
                    img(src="./images/splashScreen.jpg")
                    br
                    br
                    br
                    | Below are some outside links.
                    br
                    br
                    | Filter
                    select#linkFilter
                        option All
                        option HTML
                        option CSS
                        option JS
                        option Workflow
                    br
                    br
                    +createLink({
                        href: 'http://jsfiddle.net/',
                        title: 'JS Fiddle',
                        description: 'Javascript sandbox for playing around with js, css, and html.',
                        tags: 'HTML, CSS, JS'
                    })
                    +createLink({
                        href: 'http://gruntjs.com/',
                        title: 'Grunt',
                        description: 'Homepage for the Grunt task runner. Part of the Node.js platform, makes writing Jade and Stylus more enjoyable.',
                        tags: 'Workflow'
                    })
                    +createLink({
                        href: 'http://necolas.github.io/normalize.css/',
                        title: 'normalize.css',
                        description: 'CSS file aiming to provide cross-browser compatibility. Something worth looking into at some point.',
                        tags: 'CSS'
                    })
                    +createLink({
                        href: 'http://html5test.com/compare/feature/index.html',
                        title: 'HTML5 browser support',
                        description: 'See which browsers support various html5 features.',
                        tags: 'HTML'
                    })
                    +createLink({
                        href: 'http://naltatis.github.io/jade-syntax-docs/#basics',
                        title: 'Interactive Jade tutorial',
                        description: 'Could be a good way to pick up jade.',
                        tags: 'Jade'
                    })
                    +createLink({
                        href: 'http://jade-lang.com/reference/',
                        title: 'Jade documentation',
                        description: 'Official jade documentation. The language reference is a good jade syntax resource. The API tab could be useful if we end up using the jade API.',
                        tags: 'Jade'
                    })
                    +createLink({
                        href: 'http://learnboost.github.io/stylus/',
                        title: 'Stylus documentation',
                        description: 'Official stylus documentation.',
                        tags: 'Stylus'
                    })
                    +createLink({
                        href: 'https://developer.mozilla.org/en-US/docs/DOM/DOM_Reference/Introduction',
                        title: 'The DOM',
                        description: 'A refresher on (or introduction to) the Document Object Model',
                        tags: 'HTML, CSS, JS'
                    })
                    +createLink({
                        href: 'https://developer.mozilla.org/en-US/learn/html',
                        title: 'MDN HTML resources',
                        description: 'Resources for learning or brushing up on HTML. Compiled by the Mozilla Developer Network',
                        tags: 'HTML'
                    })
                    +createLink({
                        href: 'http://www.w3schools.com/html/default.asp',
                        title: 'W3Schools HTML tutorial',
                        description: 'Has tutorials for vanilla html as well as what is new in html5.',
                        tags: 'HTML'
                    })
                    +createLink({
                        href: 'https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Getting_started',
                        title: 'MDN CSS tutorial',
                        description: 'An introduction to cascading style sheets by the Mozilla Developer Network.',
                        tags: 'CSS'
                    })
                    +createLink({
                        href: 'https://developers.google.com/speed/docs/best-practices/rendering',
                        title: 'Optimizing browser rendering',
                        description: 'Some helpful tips for optimizing browser rendering times, including what kind of css selectors to use.',
                        tags: 'CSS, HTML'
                    })
                    br
                    br

                /////////////////////
                // DEVELOPER GUIDE //
                /////////////////////

                #dev.page
                    h2 Developer guide
                    br
                    | This page will cover how to get started developing for
                    | the web app, the Windows 8 app, and the server.
                    br
                    br
                    h3 Web app
                    | In the web app, we're using&nbsp;
                    a(href='http://en.wikipedia.org/wiki/Git_(software)') Git
                    | &nbsp;for version control, and our code is hosted on GitHub, so
                    | the first step for web app development is to get set up with Git.
                    | Check out the&nbsp;
                    a(class='plink', id='plink-github') Git and GitHub
                    | &nbsp;page to the left.
                    br
                    br
                    | Now that Git is set up, you'll need to install some Node.js modules, which
                    | requires first installing&nbsp;
                    a(href='http://nodejs.org/') Node.js
                    | . As mentioned on its website, Node is a platform that provides lots of
                    | utilities that facilitate web app creation. We're using a small subset of Node's
                    | functionality. In particular, we use&nbsp;
                    a(href='http://jade-lang.com/') Jade
                    | &nbsp;(for writing cleaner and more flexible
                    | html),&nbsp;
                    a(href='http://learnboost.github.io/stylus/') Stylus
                    | &nbsp;(analogous to Jade, but for css), and&nbsp;
                    a(href='http://gruntjs.com/') Grunt
                    | &nbsp;(for automating a lot of tedious things like compiling Jade and Stylus files).
                    br
                    br
                    | If you are not already
                    | familiar with Jade and Stylus, you can take a look at the workshops to the left or
                    | at other online documentation and tutorials (under the 'Web app links' heading to the left).
                    br
                    br
                    | To install Jade, Stylus, Grunt, and any other Node modules we happen to be using,
                    | navigate to the directory containing your clone of the TAG repository. You will first
                    | want to install the grunt command line interface using&nbsp;
                    span $ npm install -g grunt-cli
                    | . This lets you run the grunt command from your terminal. If it complains about permissions,
                    | you may need to run the install command as administrator on Windows or using sudo on Macs.
                    | After grunt-cli is installed, you can run &nbsp;
                    span $ npm install
                    | . There is a file called package.json in the top-level TAG directory that tells npm which
                    | modules to install, so you should now have everything you need. Again, you might need to
                    | run this as admin/root.
                    br
                    br
                    | To get accustomed to the structure of and normal workflow for the web app, take a look at the&nbsp;
                    a(class='plink', id='plink-webapp') relevant page
                    | &nbsp;to the left.
                    br
                    br
                    h3 Windows 8 app
                    | Stay tuned! Let the team lead know if you need this information now...
                    br
                    br
                    h3 Server development
                    | Jess Fu put together&nbsp;
                    a(href='ServerDocs/GettingStarted.txt', target='_blank') some notes
                    | &nbsp;on getting set up for server development.
                    br
                    br

                ///////////////////////////
                // JADE/STYLUS FACTORING //
                ///////////////////////////

                #factoring.page
                    h2 Factoring JS files into Jade and Stylus
                    | A few notes on factoring
                    br
                    br
                    h3 Create the files
                    | You'll just need to create one .jade and one .styl file. The .jade file will go in
                    | the LADS/html directory, and the .styl file will go in the LADS/css directory. For
                    | example, if you are factoring LADS.Layout.StartPage.js, you might consider creating
                    | LADS/html/StartPage.jade and LADS/css/StartPage.css.
                    br
                    br
                    h3 Update the Gruntfile
                    | To make sure grunt knows how to compile your files (see the webapp workflow page for
                    | more information on grunt), go ahead and add the two files you just created to
                    | Gruntfile.js (following the example of files already included in the Gruntfile). You'll
                    | notice that the next time you run 'grunt', more files are being automatically compiled.
                    br
                    br
                    h3 Update stylesheets
                    | In default.html, you'll need to add a link tag for your new stylesheet (e.g.,
                    | css/StartPage.css).
                    br
                    br
                    h3 Factor philosophy
                    | Unless it really makes sense for a particular html element to be created dynamically,
                    | it should go into your .jade file. For example, the img tag containing the Brown logo
                    | on the splash screen should be in the .jade file, but if you have a button whose click
                    | handler creates a popup, it's probably okay if that popup is created on the fly. So for
                    | each call to document.createElement, you'll have to decide whether that element could
                    | have been 'created' in the .jade file rather than via javascript.
                    | In terms of styling, the initial styling rules for every element in the page
                    | should go in your .styl file (even if this element is created dynamically! it still has
                    | a class or an id). If you see someJqueryObject.css({...}), slash it and put those
                    | rules in your stylesheet. The exception is if the call to .css is in some sort of handler
                    | that changes the existing style rules for the element...
                    br
                    br
                    h3 The root
                    | Since we're no longer creating the root of a page by calling document.createElement, we
                    | need to load in the root element of our html file instead. You can do this using the
                    | LADS.Util.getHtmlAjax function, which takes in the name of the html file to load. You can
                    | then access any children of the root (e.g., an element with id 'tagunicorn') by calling
                    | root.find('#tagunicorn').
                    br
                    br
                    h3 Conflicting CSS
                    | Since we're creating link tags for each stylsheet, there are bound to be some overlapping
                    | ids and classes that will screw with our styling. There's probably a good way to
                    | dynamically change the source of a link tag, but until then, we can avoid conflicts by
                    | starting each stylus rule with the id of the root of that page. This forces CSS to look
                    | at all children of the root for the given id or class, so it'll never match an #overlay
                    | on the collections page to an #overlay style rule on the splash screen.

                /////////////////////////////
                // GENERAL WEBAPP WORKFLOW //
                /////////////////////////////

                #webapp.page
                    h2 Web app structure and workflow
                    | A general overview of working with the web app. Also, some coding conventions.
                    br
                    br
                    h3 Structure of the web app
                    | Take a look at the top-level directory of your TAG clone. There's a directory called
                    | LADS, which has basically all of our code, and there are a couple files called
                    | package.json and Gruntfile.js. As mentioned in the&nbsp;
                    a(class='plink', id='plink-dev') developer guide
                    | , package.json contains a list of TAG's Node.js dependencies, so running&nbsp;
                    span $ npm install
                    | &nbsp;in the top-level directory will install the appropriate Node modules. The Gruntfile
                    | contains instructions for 'building' the web app, in some sense. Take a look&nbsp;
                    a(class='plink', id='plink-grunt') here
                    | &nbsp;for more information.
                    br
                    br
                    | In the LADS directory, the main attractions are the html, css, and js subdirectories.
                    | The first two are pretty self-explanatory, but to find relevant javascript files is
                    | slightly more difficult. Most javascript files related to kiosk mode (the TAG interface
                    | that a museum visitor would see) are in js/LADS/layout. For example, the collections view
                    | page's js file is js/LADS/layout/LADS.Layout.NewCatalog.js. Another important file is
                    | js/LADS/util/LADS.Util.js, which has a lot of general utility funtions (used by multiple
                    | other files).
                    br
                    br
                    br
                    h3 Workflow
                    | The basic workflow is to first pull down the latest changes from GitHub (
                    span git pull
                    | &nbsp;-- if you have local changes, though, you will need to run&nbsp;
                    span git commit -am "commit message"
                    | &nbsp; or&nbsp;
                    span git stash
                    | &nbsp; before pulling; see the&nbsp;
                    a(class='plink', id='plink-github') GitHub page
                    | &nbsp; for more information). Then you can set&nbsp;
                    span grunt watch
                    | &nbsp;running to watch for any changes. You can then edit away. Commit and pull often
                    | to make sure your code is well-synced with what is in GitHub.
                    br
                    br
                    br
                    h3 CONVENTIONS
                    | Let's try to create a sane codebase. Our current codebase is insane, and this is our
                    | chance to fix it. So let's adopt some simple conventions:
                    ol
                        li Alphabetize your stylus rules.
                        li Put common mixins and variables in common.styl.
                        li
                            | Mark code that should be completed or cleaned later with a big
                            | 'TODO' in a comment
                            | so it's easy to search for later.
                        li
                            | Mark style rules with dubious cross-browser compatibility with 'CBC?'
                            | so they are easy to search for.

                //////////////////////
                // STARTER PROJECTS //
                //////////////////////

                #starter.page
                    h2 Starter projects
                    br
                    h3 Languages
                    | TAG is an html5/css/javascript application, so to get started, it's important to make sure
                    | you feel comfortable with each of these languages. Part of this is to make sure you are comfortable
                    | with the&nbsp;
                    a(href="https://developer.mozilla.org/en-US/docs/DOM/DOM_Reference/Introduction", target="_blank") DOM
                    | . To make javascript easier, we also use&nbsp;
                    a(href="http://api.jquery.com/", target="_blank") jQuery
                    | . You can take a look at the quick jQuery&nbsp;
                    a(class='plink', id='plink-jquery') tutorial
                    | &nbsp;to the left or surf the net to find one.
                    br
                    br
                    .thumbnailContainer
                        +genThumbnailImg({src: "images/html5.png", href: "https://developer.mozilla.org/en-US/learn/html"})
                        +genThumbnailImg({src: "images/css.jpg", href: "https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Getting_started"})
                        +genThumbnailImg({src: "images/javascript.jpg", href: "https://developer.mozilla.org/en-US/docs/Web/JavaScript"})
                        +genThumbnailImg({src: "images/jquery.png", href: "http://jquery.com/"})
                        +genThumbnailImg({src: "images/jade.png", href: "http://jade-lang.com/api/"})
                        +genThumbnailImg({src: "images/stylus.png", href: "http://learnboost.github.io/stylus/"})
                    br
                    br
                    | We are using two additional mark-up languages to make our html and css more flexible and easier
                    | to write, so learning these will be important (and hopefully enjoyable!).&nbsp;
                    a(href="http://jade-lang.com/api/", target="_blank") Jade
                    | &nbsp;is an indentation-based wrapper for html that has nice features such as variables and
                    | mixins, which keep it&nbsp;
                    a(href="http://en.wikipedia.org/wiki/Don't_repeat_yourself", target='_blank') DRY
                    | .&nbsp;
                    a(href="http://learnboost.github.io/stylus/", target="_blank") Stylus
                    | &nbsp;does essentially the same thing for css. If you are comfortable with html and css, they
                    | should not take long to learn.
                    br
                    br
                    | There are some links to html, css, javascript, jade, and stylus tutorials/resources to the left,
                    | but this is a small subset of what's out there, so find a tutorial that works for you. You can
                    | also take a look at the lecture slides from&nbsp;
                    a(href="http://cs.brown.edu/courses/cs132/lectures.html", target="_blank") cs132
                    | &nbsp;(hopefully you're reading this at a time of year when notes exist on that page). You don't
                    | need to be a wizard with these languages by the end of your project, but you should be able
                    | to jump into the TAG codebase and feel relatively at-home. And always feel free to ask questions!
                    | It might be helpful to take a look at the page on&nbsp;
                    a(class='plink', id='plink-debugging') debugging
                    | .
                    br
                    br
                    br
                    h3 Getting set up with Jade and Stylus for a starter project
                    | The first thing you'll want to do is&nbsp;
                    a(href="http://nodejs.org/", target="_blank") install node.js
                    | . Jade and Stylus both fall under the node.js platform, so there are nice node utilities
                    | for working with them. Next, you can run&nbsp;
                    span $ npm install -g grunt-cli
                    | &nbsp; from the command prompt or terminal (it may ask for administrative permissions, so
                    | you might need to use an administrator command prompt on Windows or run using sudo on Macs).
                    | This will let you run a handy tool called&nbsp;
                    a(class='plink', id='plink-grunt') Grunt
                    | &nbsp;from the command line, which will take care of compiling jade and stylus for you.
                    br
                    br
                    | There's a basic starter project template&nbsp;
                    a(href="starter.zip") here
                    | . Go ahead and download and unzip it. Navigate to the directory. You'll see that it contains
                    | a .jade file, a .styl file, a package.json file, and a Gruntfile.js file. The package.json 
                    | file tells node which node packages should be installed for this project (in this case, jade,
                    | stylus, and a couple utilities). Running&nbsp;
                    span $ npm install
                    | &nbsp;should give you all the necessary packages. Again, you might need admin permissions.
                    | The Gruntfile has instructions for how to compile your jade
                    | and stylus files. Running&nbsp;
                    span $ grunt
                    | &nbsp;should now compile .html and .css files from your .jade and .styl files. It is the html
                    | and css files that the browser will use to render your page, so every time you make changes to
                    | your jade and styl sources, you should recompile. Fortunately, there is a grunt tool for making
                    | this less tedious. If you run&nbsp;
                    span $ grunt watch
                    | , grunt will wait for any changes in your files and compile when necessary.
                    br
                    br
                    h3 Project options
                    | Email the team lead for the current menu of starter project options.
                    br
                    br
                    br

                ///////////////
                // DEBUGGING //
                ///////////////

                #debugging.page
                    h2 Debugging
                    br
                    h3 Using the inspector
                    | Knowing how to debug in javascript is very helpful. The main tool at your disposal is the
                    | inspector, which lets you explore the DOM, add breakpoints, and monitor network activity
                    | generated by your site. Opening the inspector is slightly different on each browser (as is the
                    | functionality provided), but usually right-clicking on the page and selecting something
                    | sounding like "Inspect Element" will do it. We'll just talk about the Chrome inspector here,
                    | but it's basically the same on most browsers.
                    br
                    br
                    | Clicking on the "Elements" tab in the inspector will show a collapsable representation of the DOM.
                    | If you hover over an element, it will be highlighted in the page itself (with its width and height
                    | displayed), and its margin and padding will be shown in a different color. Clicking on the element,
                    | you can see more information about it in the right pane of the inspector (e.g., style rules, event
                    | handlers, etc...). If you want to experiment with the styling of the page, you can change any
                    | of the rules or add new ones. Likewise, you can edit attributes of html elements. Here's an example:
                    br
                    br
                    +genPageImg("images/inspectorElements.png")
                    br
                    br
                    | Clicking on the "Sources" tab will let you open up a source file related to the page, such
                    | as a javascript or css file. If you click on a number next to a line in a javascript file, a
                    | breakpoint will be added at that line. The breakpoint will survive page refreshes. Again, the
                    | right pane has a bunch of information about the file you're looking at.
                    br
                    br
                    | Clicking on the "Console" tab will open a javascript console. Any errors in your js files will
                    | be printed here, and if you want to add print lines to your code, you can use&nbsp;
                    span console.log('hey hey hey!');
                    | . Also, you can type out arbitrary javascript in the console. For example, if you want to check
                    | if javascript strings have a&nbsp;
                    span length
                    | &nbsp;property, you can type out something like
                    br
                    br
                    pre.prettyprint.
                        var a = 'the quick brown fox is overrated'
                        a.length
                    br
                    | If you want to do something more interesting, you can use the console to manipulate elements in
                    | the DOM. For example, you can make Keanu Reeves celebrate (or not) Brown's upcoming 250th
                    | birthday:
                    br
                    br
                    +genPageImg("images/keanuBrown.png")
                    br
                    br
                    | The console can be especially helpful in conjunction with breakpoints...
                    br
                    br
                    h3 Breakpoints
                    | There are two ways to set breakpoints. One, as mentioned above, is to use the "Sources" tab
                    | in the inspector directly. The other is to insert a line in your code:
                    br
                    br
                    pre.prettyprint.
                        var a = 5;
                        debugger;
                        // some code below
                    br
                    | If the inspector is open when this code runs, you will hit a breakpoint here. The
                    | console will have access to all variables that are in scope at this point in the code,
                    | so if you went to the console and typed "a+1", you would get 6. It's time well spent to
                    | play around with this kind of stuff.
                    br
                    br
                    h3 Stepping through
                    | When you're at a breakpoint, you can use the buttons that look like:
                    br
                    br
                    +genPageImg("images/breakpointButtons.png")
                    br
                    br
                    | to step through your code.
                    br
                    br
                    br

                /////////////
                // TESTING //
                /////////////
                #testing.page
                    h2 Testing TAG
                    br
                    | Jess Herron put together a&nbsp;
                    a(href='files/testing.pdf') very helpful document
                    | &nbsp;on testing. Check it out!
                    br
                    br
                    br

                /////////////////
                // GRUNT NOTES //
                /////////////////

                #grunt.page
                    h2 Grunt notes
                    br
                    h3 Uses of Grunt
                    a(href='http://gruntjs.com/') Grunt
                    | &nbsp; is useful for automating the compilation of Jade and Stylus files (into
                    | html and css files), but it is also useful for concatenating and minifying
                    | javascript files. We are currently using Grunt to perform the following tasks
                    | (accordingly, always run the grunt command after editing code):
                    br
                    br
                    ol
                        li Compiling all jade files in the LADS/html directory into corresponding html files
                        li Compiling stylus files in LADS/css into LADS/css/TAG.css (nice to have only one css file to include)
                        li Concatenating javascript files into LADS/TAG.js (so users only need to include one js file)
                        li
                            | When we ship, we'll run &nbsp;
                            span $ grunt uglify
                            | &nbsp;, which minifies TAG.js into TAG-min.js. Minificaiton is done by replacing variable names
                            | with mostly one-letter names and removing most whitespace. The resulting file is much
                            | smaller, which is better for performance.
                    br
                    br
                    h3 Running Grunt
                    | There are three basic ways of using Grunt:
                    br
                    br
                    ol
                        li Running&nbsp;
                            span $ grunt
                            | &nbsp;runs the default Grunt tasks (as listed in the Gruntfile -- see below) once.
                        li Running &nbsp;
                            span $ grunt watch
                            | &nbsp;creates a job that watches for any saves in the files listed in the Gruntfile. For
                            | example, if you run&nbsp;
                            span grunt watch
                            | &nbsp;and then save a Jade file, grunt will be run once, and the
                            | Jade file (along with everything else) will be compiled.
                        li Running &nbsp;
                            span $ grunt &lt;module name&gt;
                            | &nbsp;will run the Grunt task for just that module. For example, running&nbsp;
                            span grunt stylus
                            | &nbsp;will only compile stylus files.
                    br
                    br
                    h3 Gruntfile.js
                    | The Gruntfile.js file in the top-level directory of TAG controls the tasks that Grunt performs.
                    | By default, only the 'default' tasks are run. The list of these tasks can be found in the line&nbsp;
                    span grunt.registerTask('default', ['jade', 'stylus', 'concat']);
                    br
                    br
                    | If you want to add a new Jade or Stylus file to TAG, make sure to add it to the corresponding parts of
                    | the Gruntfile to ensure that it is compiled.

                /////////////////////
                // MAMP/WAMP/ANVIL //
                /////////////////////

                #mamp.page
                    h2 MAMP, WAMP, and Anvil
                    | The TAG web app makes AJAX requests, so it needs to be run on a web server. Fortunately,
                    | there are ways to set up a local web server! These probably are not the only ones, but they work:
                    br 
                    br
                    h3 WAMP (Windows, Apache, PHP, MySQL)
                    | If you are using Windows, this is the one for you!&nbsp;
                    a(href='http://www.wampserver.com/en/') Check it out
                    | . You can follow Xiaoyi's instructions below to set up WAMP:
                    br
                    br
                    | After you download WAMP, left click the little "W"
                    | icon and go to Apache. Under Apache, go to "directory" and click "add Alias". There will be a shell-like
                    | window popping up and asking for the alias you want to create. Type the alias and hit enter. Then it will
                    | ask for the address of the directory you want this alias to point to (this will be the path to your TAG
                    | local checkout). Hit Enter when you are done and the alias you just created will appear in the Apache
                    | directory list. To access your local copy of TAG, open the browser and navigate to localhost. At the bottom
                    | of the page you can find the alias you have created and click it to go to your TAG directory. If you want to
                    | change the path an alias is pointing to, go to the apache directory list and choose the alias. Click edit.
                    | It will pop up a txt file, where you can find the path and modify it. Also, to make the computers in the lab
                    | clean and organized, please don't pull a new checkout directly in random folders. I have cleaned the computer
                    | behind the PPI and move all the webapp checkout into Documents/WEBAPP and all Win8 checkout to Documents/WIN8APP.
                    | I also created an WAMP alias called WEBAPP pointing to WEBAPP folder. Thus, if you pull a new checkout under WEBAPP/yourname,
                    | you don't need to create a new alias. I will clean up the other computers some time this weekend. So if you don't
                    | find your git checkout, don't panic and go to Document/Webapp.
                    br
                    br
                    h3 MAMP (Mac, Apache, PHP, MySQL)
                    | This works on Macs.&nbsp;
                    a(href='http://www.mamp.info/en/', target='_blank') Check out the free version
                    | .
                    br
                    br
                    h3 Anvil
                    | Apparently this also works on Macs and is a lot nicer! The potential drawback is that if you're doing 
                    | any other web development that involves mysql or php, Anvil won't work for that. But for our purposes
                    | it is probably easier to use than MAMP.&nbsp;
                    a(href='http://anvilformac.com/', target='_blank') Check it out
                    | .

                ////////////
                // YUIDoc //
                ////////////

                #yuidoc.page
                    h2 YUIDoc
                    | YUIDoc is a documentation generation system built by Yahoo! See the documentation&nbsp;
                    a(href='http://browngraphicslab.github.io/tag/yuidocs/', target='_blank') here
                    | .
                    br
                    br
                    h3 Why?
                    | The TAG codebase can get pretty messy when our focus is hitting a deadline, so we need some
                    | standards for writing documentation. YUIDoc takes comments in our source files and compiles html
                    | documents that provide an easy way to access this documentation.
                    br
                    br
                    h3 Why YUIDoc?
                    | Of the javascript documentation generators listed&nbsp;
                    a(href='http://www.lsauer.com/2013/05/javascript-documentation-generator.html', target='_blank') here
                    | , YUIDoc seemed to have a good combination of ease-of-use, compatibility with our current development
                    | practices, and acceptable UI:
                    br
                    br
                    ol
                        li
                            | Ease of use: the comment syntax is pretty simple (see&nbsp;
                            a(href='http://code.tutsplus.com/tutorials/documenting-javascript-with-yuidoc--net-25324', target='_blank') here
                            | ), and recompiling the html files can be done by typing&nbsp;
                            span $ yuidoc .
                            | &nbsp; in the top-level directory (add the <span>-q</span> flag to suppress output)
                        li
                            | Compatibility: YUIDoc can be easily installed as a node module (
                            span $ npm install yuidocjs
                            | )
                        li
                            | UI: the interface of the generated html files isn't anything to write home about, but it gets
                            | the job done. YUIDoc presents the relevant information in an easy-to-navigate way, which is
                            | what's important when it comes to documentation
                    br
                    h3 Conventions 
                    ol
                        li
                            | When you write a new function, document it with a <span>@method</span> tag (not all functions
                            | may be methods in the OO sense, but we can conflate the terms for our purposes). Document
                            | all parameters and return values with the <span>@param</span> and <span>@return</span> tags.
                            | Also provide types for these values. For example:
                            br
                            br
                            pre.prettyprint.
                                /**
                                 * Returns a notice message given a certain connectivity error.
                                 * @method getNoticeText
                                 * @param {String} error       the error type
                                 * @return {String}            an error message to be displayed
                                 */
                                function getNoticeText(error) {
                            br
                            br
                        li
                            | Top-level constructors such as <span>LADS.Layout.Artmode</span> should be documented with a
                            | <span>@class</span> tag. Also add the <span>@constructor</span>
                            | tag to this comment and document any parameters as above. For example:
                            br
                            br
                            pre.prettyprint.
                                /**
                                 * The artwork viewer, which contains a sidebar with tools
                                 * and thumbnails as well as a central area for the deepzoom image.
                                 * @class LADS.Layout.Artmode
                                 * @constructor
                                 * @param {Object} prevInfo      contains information about returning
                                 *                                 to the previous page
                                 * @param {Object} options       information about current artwork and
                                 *                                 whether we're in splitscreen mode
                                 * @param {Doq} exhibition       the exhibition we came from (if any)
                                 */
                                LADS.Layout.Artmode = function (prevInfo, options, exhibition) {
                        

                /////////////////////
                // GITHUB TUTORIAL //
                /////////////////////

                #github.page
                    h2 Git and GitHub tutorial
                    | A quick look at version control with Git for our web app workflow.
                    br
                    br
                    h3 Why Git and GitHub?
                    | Git is a fast and reliable version control system, and it is widely used, making it a
                    | helpful thing to know. GitHub allows us to create free, private, shared repositories (since
                    | we have an organizational account). It also has nice issue tracking and is the most
                    | widely-used code hosting service.
                    br
                    br
                    h3 Set up a GitHub account
                    ol
                        li Go to <a target="_blank" href="http://github.com/">github.com</a>.
                        li Creating an account should be pretty straightforward.
                        li Make sure you add your full name to your account. It can be difficult to map usernames to people...
                        li Once you have an account, you'll still need to be added to the TAG team. Email the current team lead!
                        li In order to pull from and push to github, you may need an ssh key. If so, there's probably documentation on github about it (and let the team lead know so this page can be updated to include instructions).
                    br
                    br
                    h3 Clone the repository
                    | The next step is to get a local version of the TAG webapp code, so you can develop on your machine. Win8 not necessary!
                    ol
                        li Install Git on your machine. If you have any trouble with this, let the current TAG lead know.
                        li Run&nbsp;
                            span $ git help
                            | &nbsp; to make sure Git is working (it should come up with a list of possible Git commands)
                        li If Git is working properly, run&nbsp;
                            span $ git clone https://github.com/browngraphicslab/tag.git
                            | &nbsp; to get your local copy. By default, it will clone into a directory called 'tag,' but you can change this
                            | by adding an argument to the command above, e.g.,&nbsp;
                            span $ git clone https://github.com/browngraphicslab/tag.git awesome_directory_name
                    br
                    br
                    h3 Make and commit some local changes
                    | Now that you have a local clone, you can start developing. Change directory into the cloned repository and make some
                    | changes to a file (preferably something useful!).
                    ol
                        li Now, if you type&nbsp;
                            span $ git status
                            | &nbsp; this will show you a list of modified files (that is, modified since the last time you committed code)
                            | as well as some other useful information about the state of your local copy versus the state of the last commit.
                        li To commit code to your local clone, type&nbsp;
                            span $ git commit -am "your_commit_message_here"
                            | &nbsp; Here, we have combined a few actions in a convenient shorthand. To break it down a bit, 'git commit' on its
                            | own will commit any changes that have been added to the list of files ready for commit, and it will bring up a
                            | prompt asking for a commit message. Adding the flag '-a' adds all modified/deleted files to the list before
                            | committing, and adding the '-m' flag allows you to type your commit message on the same line, which is handy.
                    br
                    br
                    h3 Pull in other people's changes        
                    | Now your code has been committed to your local clone. Before making your changes accessible to the rest of the group,
                    | you will need to pull in changes made by other people.
                    ol
                        li This can be done by running&nbsp;
                            span $ git pull
                            | &nbsp; This will bring in the latest changes and try to merge them with the code in your working directory. This can
                            | sometimes cause merge conflicts, which will appear in the output in the terminal (usually as "CONFLICT" in all caps
                            | along with the name of the file in which the conflict occurred).
                        li To fix a merge conflict, enter the relevant file
                            | and locate any lines delimited by ">>>>>>>>" and "<<<<<<<<". In between these will be a line "========"
                            | separating two sections in the code. These are the sections that Git was unsuccessful in merging; you will need to
                            | decide which of the two you would like to keep and which you would like to delete. After you have cleared all
                            | conflicts by deleting the unnecessary sections (as well as the lines beginning with ">>>", "<<<", and "==="), you
                            | can re-commit your code.
                    br
                    br
                    h3 Push your changes
                    | After pulling and cleaning merge conflicts, you can push your code up to GitHub (so other people can pull it down)
                    | by running&nbsp;
                    ol
                        li This can be done by running&nbsp;
                            span $ git push
                        li You can double-check that your push was succesful by looking at the list of commits in GitHub. 
                    br
                    br
                    h3 Basic summary
                    ol
                        li Create a new local clone with&nbsp;
                            span $ git clone https://github.com/browngraphicslab/tag.git
                        li Make some local changes
                        li Commit these changes with&nbsp;
                            span $ git commit -am "brief_commit_message"
                        li Pull in other people's changes with&nbsp;
                            span $ git pull
                            | . This is a good thing to do frequently as you work to make sure your local copy isn't too far out of sync with
                            | the project on GitHub.
                        li Push your changes with&nbsp;
                            span $ git push.
                    br
                    br
                    h3 Branches 
                    | If you are working on a semi-major feature (anything that will likely take longer than a day or two or that you are
                    | working on with someone else), you should
                    | make a branch for your changes. Branches let you keep changes for this feature in a separate, parallel git index,
                    | so pulling from and pushing to the branch will not affect the "master" branch (the philosophy is that the master
                    | branch should always have the latest working code and should not have any in-progress changes). You can create a
                    | new branch by running the&nbsp;
                    span $ git checkout -b &lt;branch_name&gt;
                    | &nbsp;command. This will create a new branch and "check it out." To switch to a branch, for example back to the master
                    | branch, you can run&nbsp;
                    span $ git checkout &lt;branch_name&gt;
                    | . When you pull and push now, you'll want to specify the branch name:
                    br
                    br
                    span $ git push origin &lt;branch_name&gt;
                    br
                    span $ git pull origin &lt;branch_name&gt;
                    br
                    br
                    | When development of the feature is complete and tested/reviewed, you can merge it back into the master branch and all
                    | will be well.
                    br
                    br
                    h3 Notes
                    ol
                        li As mentioned above, PULL OFTEN to ensure that your code is in sync
                        li If you don't want to create a new commit each time you pull, you can instead "stash" your changes. Stashing means that
                            | you are cleaning your current working directory by sequstering all changes since the last commit. To do this, you
                            | can run&nbsp;
                            span $ git stash
                            | &nbsp;Then when you pull, git only has to merge against your last commit. 
                            | To re-apply your changes (which might cause merge conflicts the will need to be resolved), run&nbsp;
                            span $ git stash apply.
                        li For the moment, we will be working mostly on different files (as we factor css/html). Later, it may be helpful to create
                            | separate branches for development of different features; if multiple people are working on the same feature, they
                            | can create a branch of the the main repository dedicated to that feature. Any commits and pushes will affect
                            | only that branch until it is merged back into the main branch.
                    br
                    br

                ////////////////////
                // PATH SMOOTHING //
                ////////////////////

                #pathsmoothing.page
                    h2 Ink Path Smoothing
                    | The v1.5 ink path code is virtually unusable by curators because the resulting paths are too crooked.
                    br
                    br
                    | Try drawing below! Hopefully it's a bit smoother.
                    br
                    br
                    #pscanvas
                    br
                    #sliderDiv
                        | This slider controls how far apart each point is drawn. In the current implementation, points are drawn as
                        | close together as possible and straight lines are drawn between them. Here, we're drawing the points farther
                        | apart and using SVG bezier curve commands to smooth the resulting path.
                        br
                        input(type="range", min="0", max="50", step="5", value="20", onchange="updateThresh(this.value)")
                        | &nbsp;&nbsp;
                        #threshDiv 20
                        br
                        br
                        br
                        | This slider controls how close to the first point in a path you must be before the interface offers to close
                        | your path. This could be helpful if you want to draw a closed path around objects in an artwork.
                        br
                        input(type="range", min="0", max="20", step="1", value="10", onchange="updateCloseThresh(this.value)")
                        | &nbsp;&nbsp;
                        #closeThreshDiv 10

                //////////////////
                // POPCORN TEST //
                //////////////////

                #popcorn.page
                    h2 Popcorn Test
                    br
                    br
                    #annotationContainer
                        #annotationHeader Code-generated annotations (1.5-4.5 sec):
                        br
                        #annotations
                        br
                        #imageHeader Image annotations (4-15 sec):
                        br
                        #images
                        br
                        #footnoteHeader Footnote annotations (add below):
                        br
                        #footnotes
                        br
                        #footnoteAddHeader Add a new footnote annotation
                        #footnoteAdd
                            input(type="text", id="startTime", placeholder="start time")
                            br
                            input(type="text", id="endTime", placeholder="end time")
                            br
                            input(type="text", id="text", placeholder="text")
                            br
                            button(type="button", onclick="addNewEffect()") add
                    video(controls, id="stormtrooper", width="200px")
                        source(src="videos/stormtrooper.mp4")
                    #thumbnail
                        button(type="button", onclick="captureThumbnail()") Capture thumbnail
                        br
                        br
                        img(id="thumbnailImg", src="", width="300px")
                    
                ///////////////////
                // REDMINE INTRO //
                ///////////////////
                
                #redmine.page
                    h2 Redmine Issue Tracker (NOT USED ANYMORE!!!! DEPRECATED!!!!)
                    | Getting started and best practices
                    br
                    br
                    h3 Set up an account
                    ol
                        li Go to <a target="_blank" href="http://tagissuetracker.cs.brown.edu:3000">tagissuetracker.cs.brown.edu:3000</a>.
                        li Click "Register" to create an account
                        li.
                            You now have an account, but you still need to be added to the TAG project by an admin. You can do this
                            yourself using the 'admin' account (ask around for the password), or you can ask the project lead to
                            add you.
                    br
                    h3 Quick overview
                    ol
                        li There are a couple tabs at the top, including the "My page" and "Projects" tabs
                        li The "My page" tab lists all the issues reported by and assigned to you
                        li The "Projects" tab brings up the main TAG project as well as a couple sub-projects
                        li Within the TAG project, there are three tabs you will likely find most useful: "Issues," "New issue," and "Files"
                        li "Issues"
                            ol
                                li.
                                    Here is the list of all past and present bug reports and feature requests. All of the blue headings can be
                                    clicked to sort, and you can apply filters using the drop-down on the right (e.g. filtering by Status = open
                                    and Target version = TAG - v1.5 will give you a list of the bugs and features we need to get through for release
                                    1.5).
                                li
                                    | Most of the status options are pretty self explanatory, but just to clarify the workflow:
                                    ol
                                        li When an issue is created, it has status "new"
                                        li When you start working on an issue, update the issue to mark it as "in progress" so nobody else starts working on it
                                        li When you think you've finished, mark it as "pending review" and list a reviewer
                                        li.
                                            Once it has been thoroughly tested, it is marked as "closed," or if it doesn't hold up under review, it is marked
                                            as "reopened"
                        li "New issue"
                            ol
                                li.
                                    When you notice a bug or think of a cool feature, create a new issue here
                                li.
                                    Most of the categories are self explanatory. Note that the "reviewer" is set to "same as author" unless you change it. The
                                    reason for this is that if you noticed the bug, you are probably a good person to be reviewing the fix. Unless you're the one
                                    to fix it, in which case you should mark someone else. Put anyone down as a reviewer!
                                li.
                                    If the issue is UI related and a screenshot would really clarify the issue description, include one!
                        li "Files"
                            ol
                                li.
                                    If you need test files (e.g. if you are working on something related to associated media uploading), there are a few up here
                                li.
                                    Feel free to add more!
                    
                
                //////////////////////
                // CSS ALPHABETIZER //
                //////////////////////
                
                #alphacss.page
                    h2 Alphabetize your CSS/Stylus
                    br
                    | Note: This is not a very robust alphabetizer, but it works in the very specific use case described below :).
                    | If you want to make it better, please do!
                    br
                    br
                    #widgetContainer
                        textarea#textarea(placeholder=" enter css here...")
                        br
                        .button(onclick="alphabetize()") selectors
                        .button(onclick="alphabetizeProperties()") properties
                        .button(onclick="alphabetizeAll()") all
                    br
                    br
                    .descContainer
                        h2 How to use
                        ol
                            li
                                | Make sure that each set of rules in your code is separated by a
                                | blank line and that selectors aren't preceded by spaces or tabs.
                                br
                                br
                            li
                                | Copy-paste your css or stylus code into the box above
                                br
                                br
                            li
                                | Click 'selectors' to alphabetize by selector. Click 'properties'
                                | to alphabetize the list of properties in each set of rules. Click
                                | 'all' to do both.
                
                ///////////////////////////
                // SEADRAGON VIEWER TEST //
                ///////////////////////////
                
                #seadragonTest.page
                    h2 Some embedded Seadragon viewers
                    br
                    #mainSeadragonContainer
                        #container4.container
                        | &nbsp;&nbsp;
                        i An Old Man in Military Costume&nbsp;
                        | (Rembrandt, 1630-1), from&nbsp;
                        a(href="http://search.getty.edu/gateway/search?q=&cat=highlight&f=%22Open+Content+Images%22&rows=10&srt=a&dir=s&pg=1", target="_blank") here
                        | .
                        br
                        br
                        #container1.container
                        br
                        #container2.container
                        br
                        #container3.container
                        br
                        br
                    .descContainer
                        | These examples were created using images from&nbsp;
                        a(href="http://www.flickr.com/photos/culturevis/sets/72157624959121129/") here
                        | . The images were first run through&nbsp;
                        a(href="http://www.microsoft.com/en-us/download/details.aspx?id=24819") Deep Zoom Composer
                        | &nbsp; (exported into Seadragon Ajax format). The resulting dzc_output.xml files can be
                        | used as arguments to the <span>openDzi(...)</span> method in&nbsp;
                        a(href="http://msdn.microsoft.com/en-us/expression/gg413362") this html template
                        | .
                        br
                        br
                        br
                        
                ///////////////////////////
                // JADE WORKSHOP -- PT 1 //
                ///////////////////////////
                
                #jade-workshop.page
                    h2 Jade Workshop: Jade Syntax
                    | An introduction to using Jade
                    br
                    br
                    h3 What is Jade?
                    ol
                        li.
                            Jade is an html templating language that makes writing html templates pretty easy. Say goodbye
                            to &lt;&gt; and &lt;!-- &nbsp; --&gt;.
                        li.
                            Jade is based on indentation to avoid the need for closing tags (a la Python, e.g.), and it knows
                            which tags are self-closing (e.g. &lt;br /&gt).
                        li.
                            Jade uses a JSON-formatted "context" to fill pages with interesting content. This is the
                            templating side of Jade.
                    br
                    h3 Installing Jade
                    ol
                        li Run&nbsp;
                            span $ npm install jade --global
                    br
                    h3 To start
                    ol
                        li.
                            The easiest way to start using Jade is to look at an existing html file and convert it. Normal
                            html is valid Jade (as long as there are no unexpected indents; just un-indent everything to
                            start if need be), so you can work through a file and easily test as you go. You'll want to save
                            the html file as a .jade file so you can distinguish it from the html file Jade will produce.
                            To run Jade on a .jade file (i.e. to compile it to an html file), just run
                            <br /><br />
                            <span>$ jade file_name.jade</span>
                            <br /><br />
                            This will produce an html file (file_name.html). You can tack on <span>--pretty</span> if you want
                            to be able to read the resulting html file easily. Otherwise, it minifies it. You can also take
                            a look at the examples under "Jade examples" in the left menu. Replacing the url .html extensions
                            with .jade will let you see the Jade source files. You can look at the Jade source of this page
                            as well (index.jade).
                    br
                    
                    h3 Example
                    | This is the Jade that generated part of the JS Hint page. Ignore the text highlighting...
                    br
                    br
                    pre.prettyprint.
                        div(id="jshint-practices", class="page")
                            h2 JS Hint: Good Practices
                            | Workflow for using JS Hint to validate code...do it! // just text (no tag)
                            br
                            br
                            h3 Installing JS Hint
                            ol
                                li Open up the node.js command prompt (if not available, download node.js first)
                                li Run
                                    br
                                    span= '$ npm install jshint --global'
                                    br
                                    | This will install JS Hint globally.
                            br
                            h3 Using JS Hint on a file
                            ol
                                li Change directory to where the file resides. E.g.
                                    br
                                    span= '$ cd Documents/<your_folder>/LADS/js/LADS/tourauthoring'
                                    // that ^ line is escaped
                                li Run using the <span>jshint</span> command. E.g.
                                    br
                                    span= '$ jshint LADS.TourAuthoring.Viewer.js'
                                li Clean up code
                                li Repeat
                    br
                    h3 Documentation
                    | Jade has pretty good documentation. The language reference can be found&nbsp;
                    a(href="http://jade-lang.com/", target="_blank") here
                    | &nbsp;and the Jade github page with further documentation can be found&nbsp;
                    a(href="https://github.com/visionmedia/jade", target="_blank") here.
                    br
                    br
                    
                /////////////////////
                // STYLUS WORKSHOP //
                /////////////////////
                
                #stylus-workshop.page
                    h2 Stylus Workshop: Stylus Syntax
                    | An introduction to using Stylus
                    br
                    br
                    h3 What is Stylus?
                    ol
                        li.
                            Stylus provides an easy way to write DRY css.
                        li.
                            CSS is generated from .styl files using Stylus.
                        li.
                            You can define variables and even functions to make css creation easier.
                        li.
                            You can <a href="http://learnboost.github.io/stylus/docs/extend.html" target="_blank">@extend</a>
                            common css rules to cut down on code. 
                    br
                    
                    h3 Examples
                    ol
                        li Eliminate curly braces, colons, semicolons
                            br
                            br
                            pre.prettyprint.
                                #topbar
                                    width 100%
                                    height 110px
                                    padding-top 20px
                                    border-bottom 2px solid orangeColor
                            br
                        li In the example above, we used a variable <span>orangeColor</span>. Variables can be declared like so
                            br
                            br
                            pre.prettyprint.
                                zero = 0px
                                bodyFont = 16px
                                orangeColor = #ff9614
                                images = './images/'
                            br
                        li We can define Stylus "mixins" that create style rules based on supplied arguments. Mixins are defined and used like so
                            br
                            br
                            pre.prettyprint.
                                border-radius(r)
                                    -moz-border-radius r
                                    -webkit-border-radius r
                                    -o-border-radius r
                                    -ms-border-radius r
                                    -khtml-border-radius r
                                    border-radius r

                                pre.prettyprint, code.prettyprint // ooooh meta
                                    border-radius 8px
                                    padding-top 5px
                                    padding-bottom 5px
                                    padding-left 5px
                            br

                        li
                            | Mixins and "functions" are similar, but they are invoked in slightly different situations. Mixins replace entire
                            | css rules, while functions supply values for properties. They are declared in the same way. Stylus also knows
                            | what you are trying to do, and you can check if you are trying to use a function in a mixin setting:
                            br
                            br
                            pre.prettyprint.
                                createUrl(imgName)
                                    if mixin
                                        background url(images+imgName)
                                    else
                                        url(images+imgName)
                            br
                            | This function produces a full rule&nbsp;
                            span background url('./images/'+imgName)
                            | &nbsp;if it is being used as a mixin (i.e. similar to how&nbsp;
                            span border-radius
                            | &nbsp;was used above), but it just returns the value&nbsp;
                            span url('./images/'+imgName)
                            | &nbsp;otherwise:
                            br
                            br
                            pre.prettyprint.
                                body
                                    createUrl('tagUnicorn.png') // used as mixin
                                    background createUrl('tagUnicorn.png') // not used as mixin
                            br
                            br
                ///////////////////////
                // JS HINT PRACTICES //
                ///////////////////////
            
                #jshint-practices.page
                    h2 JS Hint: Good Practices
                    | Workflow for using JS Hint to validate code...do it!
                    // this ^ is just text; start with a pipe
                    br
                    br
                    h3 Installing JS Hint
                    ol
                        li Open up the terminal or node.js command prompt (if not available,&nbsp;
                            a(href="http://nodejs.org/", target="_blank") install node.js
                            | &nbsp;first)
                        li Run
                            br
                            span= '$ npm install jshint --global'
                            br
                            | This will install JS Hint globally.
                    br
                    h3 Using JS Hint on a file
                    ol
                        li Change directory to where the file resides. E.g.
                            br
                            span= '$ cd Documents/<your_folder>/LADS/js/LADS/tourauthoring'
                            // that ^ line is escaped
                        li Run using the <span>jshint</span> command. E.g.
                            br
                            span= '$ jshint LADS.TourAuthoring.Viewer.js'
                        li Clean up code
                        li Repeat
                    br
                    br
            
                /////////////////////////
                // JAVASCRIPT WORKSHOP //
                /////////////////////////
                
                #javascript-workshop.page
                    h2 Javascript coding practices workshop
                    | Adapted from Javascript: The Good Parts by Douglas Crockford
                    br
                    br
                    ul
                        li
                            h3 Functions (p.26)
                            div.full-text
                                ol
                                    li.
                                       Functions have two additional parameters besides those explicitly passed: <span>this</span>
                                       and <span>arguments</span>. The value of <span>this</span> depends on the way the function is
                                       invoked. The value of <span>arguments</span> is an array-like object containing the full list
                                       of arguments passed to the function (array-like because it is an object with integer property
                                       names, but it does not inherit from Array.prototype). This is helpful because Javascript doesn't
                                       enforce anything about numbers of arguments passed to functions; you can pass as many or as few
                                       as you want, and <span>arguments</span> keeps track of them all.
                                    br
                                    br
                                    li
                                        | Ways of invoking functions:
                                        ol
                                            li As properties of objects. In this case, <span>this</span> is bound to the object.
                                            li.
                                                Normal function invocation. In this case, <span>this</span> is bound to the global object,
                                                regardless of whether our function is an inner function (in which case we would expect
                                                <span>this</span> to be bound to the <span>this</span> of the outer function). To get
                                                around this, create a variable like <span>that=this</span> before entering
                                                the inner function, since <span>that</span> will be visible as a normal variable.
                                            li.
                                                As a constructor (i.e. with <span>new</span>). In this case, a new object will be
                                                constructed, and <span>this</span> will be bound to the object. REMEMBER if you use
                                                constructors at all, they must be called with the <span>new</span> operator, since otherwise,
                                                <span>this</span> will be bound to the global object and you could end up overwriting
                                                global information!</li>
                                            li.
                                                The last way we can choose the value of <span>this</span> is by invoking the function with
                                                <span>Function.prototype.apply</span>, which takes <span>this</span> to bind as its
                                                first argument.
                                        br
                                        br
                        li
                            h3 Function scope (p.36)
                            div.full-text
                                ol
                                    li.
                                        In Javascript, variables are in scope throughout the entire function in which they are declared. This
                                        can be confusing if, for example, you expect a variable just to be in scope in a loop. For
                                        this reason, it is safest to declare all variables at the top of each function. This will make it
                                        easier to spot scope-related bugs. Note that inner functions have access to the variables of their
                                        outer functions, but not vice versa.
                                        
                                    li
                                        | It is often nice for inner functions to have access to variables from their outer functions, but it can
                                        | cause some weirdness. Consider
                                        | a list of buttons (e.g. the buttons for showing hotspots on an artwork). In creating the click
                                        | handlers for these buttons, the first inclination might be to do something like
                                        br
                                        br
                                        pre.prettyprint.
                                            for(i=0; i&lt;buttons.length; i+=1) {
                                                $(buttons[i]).on('click', function() {
                                                    open(hotspot[i]);
                                                });
                                            }
                                        br
                                        | However, the variable <span>i</span> used in the click handlers is the same reference as that used
                                        | outside, not a snapshot copy. This means that by the time our click handlers are actually called,&nbsp;
                                        span i
                                        | &nbsp;will most likely be&nbsp;
                                        span buttons.length
                                        | , and this is not what we want.
                                        br
                                        br
                                        | A safer way to do this is to call a helper function which takes the index&nbsp;
                                        span i
                                        | &nbsp;and returns
                                        | a function that opens hotspot <span>i</span>. Since the helper function is not declared within
                                        | the scope of the for loop and we pass in <span>i</span> by value (as a Number), it will not see
                                        | changes to <span>i</span>.
                                        | <a href="http://jsfiddle.net/bleveque/EXuu5/" target="_blank">Demo</a>. We can
                                        | achieve the same effect by using closure:
                                        | <a href="http://jsfiddle.net/bleveque/5TAJg/" target="_blank">Demo</a>. Note that JSHint
                                        | complains in this case, though...
                                br
                        br
                        li
                            h3 Closure
                            div.full-text
                                ol
                                    li.
                                        Closure is the property that inner functions have access to the current context at the time
                                        of their creation, so inner functions can outlive the functions they are contained within. (p.37).
                        br
                        li
                            h3 Asynchronous patterns
                            div.full-text
                                ol
                                    li.
                                        Queues: can push to-be-executed asynchronous calls into a queue. They will be executed in the
                                        order they were pushed.
                                    li.
                                        JQuery promises: keep track of whether an asynchronous call has completed
                                        (<a href="http://api.jquery.com/promise/" target="_blank">http://api.jquery.com/promise/</a>).
                                        Allows for intuitive chaining of function calls.
                        br
                        li
                            h3 Inheritance
                            div.full-text
                                ol
                                    li.
                                        The book mentions a few methods to go about inheritance. One is a technique that more closely
                                        resembles class-based inheritance, where constructor functions are defined and objects are
                                        new-ed (p.47): <a href="http://jsfiddle.net/bleveque/QSv2J/" target="_blank">Demo</a>.
                                        In this case, we just add properties to <span>this</span> within the constructor (recall that
                                        <span>this</span> is bound to the new object when we use <span>new</span>).
                                        The problem with this method is that there is no way to create private variables. Everything created
                                        is just an object which is completely readable/writable. There's a way to set these properties, using
                                        Javascript's 
                                        <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty" target="_blank">defineProperties</a>
                                        method, but this is a bit roundabout.
                                    li.
                                        Another way to create 'classes,' which we have been using in a lot of the tour authoring code,
                                        is by using the 'functional' method. The basic idea is to define a function which
                                        will create and build up an object and then return it. We can pass in parameters which give context,
                                        (i.e. <span>spec</span>, which contains everything necessary to build up the object,
                                        and <span>my</span>, which holds important private information for inheritance).
                        br
                        li
                            h3 Miscellaneous recommendations/tidbits
                            div.full-text
                                ol
                                    li.
                                        Declare variables at the top of functions (you might as well,
                                        and it helps makes errors more obvious)</li>
                                    li.
                                        Always use blocks/curly braces when possible (avoids a lot of hard-to-spot errors)
                                    li.
                                        Always use semicolons (otherwise, javascript tries to 'figure it out' and can fail)
                                    li.
                                        Use JSLint
                                    li.
                                        Don't add extra commas at the end of array or object literals
                                    li.
                                        Be careful with for..in loops
                                    li.
                                        Keep in mind that arrays are 'special' objects; they can have methods/non-integer properties...
                                    li.
                                        In Javascript, there aren't <span>int</span> or <span>float</span> types, just Numbers, which are stored
                                        as floating point values (meaning, for example, that integer division is a non-issue).
                                        The return types of <span>parseInt</span> and <span>parseFloat</span> are then the same.</li>
                                    li.
                                        Use the <span>isNaN(number)</span> function to check if a value is <span>NaN</span>. The comparison
                                        <span>NaN === NaN</span> returns false...
                                
                        br
                        li
                            h3 Falsy values (all other values are truthy)
                            div.full-text
                                ol.nostyle
                                    li
                                        span false
                                    li
                                        span null
                                    li
                                        span undefined
                                    li
                                        span '' 
                                        | (the empty string)
                                    li
                                        span 0
                                    li
                                        span NaN
                        br
                        li
                            h3 Reserved words
                            div.full-text
                                ol.nostyle
                                    li
                                        span.
                                            abstract<br />
                                            boolean break byte<br />
                                            case catch char class const continue<br />
                                            debugger default delete do double<br />
                                            else enum export extends<br />
                                            false final finally float for function<br />
                                            goto<br />
                                            if implements import in instanceof int interface<br />
                                            long<br />
                                            native new null<br />
                                            package private protected public<br />
                                            return<br />
                                            short static super switch synchronized<br />
                                            this throw throws transient true try typeof<br />
                                            var volatile void<br />
                                            while with
                        br